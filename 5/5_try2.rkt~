#!/usr/bin/racket
#lang racket

(define lines (file->lines "input"))
(define testlines (file->lines "test_input"))
(define seeds (map string->number (rest (string-split (first lines) " "))))
(define testseeds (map string->number (rest (string-split (first testlines) " "))))

(define maps (rest (rest lines)))
(define testmaps (rest (rest testlines)))

(define (get-destination inputnr destination-numbers input-numbers ranges)
  (local ((define (in-range? in ins r)
            (cond
              [(and (>= in ins) (< in (+ ins r))) true]
              [else false]))
          (define (get-destination inputnr destination-numbers input-numbers ranges)
            (cond
              [(empty? destination-numbers) inputnr]
              [(in-range? inputnr (first input-numbers) (first ranges))
               (+ (first destination-numbers) (- inputnr (first input-numbers)))]
              [else (get-destination inputnr
                                     (rest destination-numbers)
                                     (rest input-numbers)
                                     (rest ranges))])))
    (get-destination inputnr destination-numbers input-numbers ranges)))

;; Map
(define-struct amap (dest in r))

;; get-maps: list-of-maps
(define (get-maps lines)
  (local ((define (get-maps lines current-map result)
            (cond
              [(empty? lines) (append result (list current-map))];; place new map in back
              [(string=? (first lines) "") (get-maps (rest (rest lines)) (make-amap empty empty empty) (append result (list current-map)))];; also pass header
              [else (let
                        ([linelist (string-split (first lines) " ")])
                        (get-maps (rest lines) (struct-copy amap current-map
                                                            [dest (cons (string->number (first linelist)) (amap-dest current-map))]
                                                            [in (cons (string->number (first (rest linelist))) (amap-in current-map))]
                                                            [r (cons (string->number (first (rest (rest linelist)))) (amap-r current-map))])
                                  result))])))
    (get-maps (rest lines) (make-amap empty empty empty) empty)))

(define allmaps (get-maps maps))
(define alltestmaps (get-maps testmaps))

